#+TITLE: Haskell configuration and utilities
#+AUTHOR: Johannes Maier
#+EMAIL: johannes.maier@mailbox.org
#+STARTUP: showall
#+OPTIONS: toc:nil

* Insert language extensions and GHC options

This package contains A couple of Emacs Lisp functions that help me to make
quick changes to Haskell files (adding pragmas, language extensions, GHC
options).

#+begin_src emacs-lisp
(defun +haskell-make-pragma (pragma content)
  "Create a pragma line of type `pragma' containing `content'."
  (concat "{-# " pragma " " content " #-}\n"))

(defun +haskell-add-language-extension (ext-name)
  "Add an extension from the list of available language extensions
to the top of the file."
  (interactive
   (list
    (completing-read
     "Extension: "
     haskell-ghc-supported-extensions)))
  (let ((pragma (+haskell-make-pragma "LANGUAGE" ext-name)))
    (save-excursion
      (goto-char (point-min))
      (insert pragma))))

(defun +haskell-add-ghc-option (opt-name)
  "Add a GHC option from the list of options to the top of the
file."
  (interactive
   (list
    (completing-read
     "GHC option: "
     haskell-ghc-supported-options)))
  (let ((pragma (+haskell-make-pragma "OPTIONS_GHC" opt-name)))
    (save-excursion
      (goto-char (point-min))
      (insert pragma))))
#+end_src

* Insert imports

This function is the one is use by far the most. It makes it somewhat easy to
add =import= statements to Haskell files. It's surely not perfect, but fits my
preferences well; that is, I almost never use the combinations that are harder
to add with this template. For instance, adding a qualified import with import
list, or an unqualified one with an alias, would require "tricks".

#+begin_src emacs-lisp
(require '+elisp-utils)
(defun +haskell-add-import (arg module &optional qualified? alias)
  "Add an import to the import list.  When no prefix ARG is set, the
user will be prompted whether the import should be qualified, and
what the identifier should be in that case."
  (interactive
   (let* ((arg current-prefix-arg)
          (module (read-string "Module: "))
          (qualified?
           (unless (or arg (string-match-p "(" module))
             (y-or-n-p (concat "Import " module " qualified?"))))
          (default-alias
           (last (split-string module "[\.]" t)))
          (alias (when qualified?
                   (+read-non-empty-string "Alias: " default-alias))))
     (list arg module qualified? alias)))
  (let ((import-line
         (concat "import "
                 module
                 (when qualified? " qualified")
                 (when (and alias
                            (not (string= alias module)))
                   (concat " as " alias))
                 "\n")))
    (save-excursion
      (haskell-navigate-imports-go)
      (insert import-line))))
#+end_src

* Templates

While I'm using =TempEL= for templates in Emacs, some things are just a tad bit
too complex to handle in a template language, and much easier to do in ELisp.
These go here.

** Newtypes

In Haskell, =newtype= is a mechanism I use all the time.  These are different (but
not all) scenarios that need to be possible to output with a utility command:

#+begin_src haskell :tangle no
newtype Foo = Foo Int
newtype Foo a = Foo (IO a)
newtype Foo = Foo { unFoo :: Int } -- the default
newtype Foo = SomeCtor { unFoo :: Int }
newtype Foo = SomeCtor { custom :: Int }
newtype Foo a = SomeCtor { unFoo :: ReaderT Config IO a }
-- etc.
#+end_src

The following rather complicated command /should/ handle all the cases above.

#+begin_src emacs-lisp
(defun +haskell-newtype-template (arg name ctor accessor type)
  "Create a Haskell newtype declaration.  This will ask you for the
type NAME, the inner TYPE, and optionally for constructor and
accessor name.  If called with a non-nil prefix ARG then it won't
create and accessor and omit the curly braces."
  (interactive
   (let* ((arg current-prefix-arg)
          (name (+read-non-empty-string "Name: "))
          (ctor (or (+read-non-empty-string
                     (concat "Constructor [default " name "]: "))
                    name))
          (accessor-def (concat "un" name))
          (accessor (unless arg
                      (or (+read-non-empty-string
                           (concat "Accessor [default " accessor-def "]: "))
                          accessor-def)))
          (type (+read-non-empty-string "Inner type: ")))
     (list arg name ctor accessor type)))
  (let* ((type-parts
          (mapcar (lambda (s)
                    (replace-regexp-in-string "[\\(\\)]" "" s))
                  (split-string type split-string-default-separators t)))
         (type-param (seq-find (lambda (s)
                                 (let ((c (string-to-char s)))
                                   (equal c (downcase c))))
                               type-parts))
         (lhs (if type-param
                  (concat name " " type-param)
                name))
         (final-type (if (and arg
                              type-param
                              (> (seq-length type-parts) 1)) ; need parens around type
                         (concat "(" type ")")
                       type))
         (content (if accessor
                      (concat "{ " accessor " :: " final-type " }")
                    final-type)))
    (insert
     (concat "newtype " lhs " = " ctor " " content "\n"))))
#+end_src

* Navigating errors

As always, =hydra= is highly capable of simplifying all sorts of navigational sets
of commands.

#+begin_src emacs-lisp
(defhydra hydra-haskell-error-navigation (:hint nil)
  "\n
  Navigate Haskell compilation errors\n
  [_f_]: first   [_n_]: next   [_p_]: previous"
  ("f" haskell-goto-first-error)
  ("n" haskell-goto-next-error)
  ("p" haskell-goto-prev-error))
#+end_src

* Formatting

Several formatters are in use in different Haskell projects, like =fourmolu=,
=ormolu=, =brittany= and several more.  =Haskell-mode= comes with builtin integration
for =stylish-haskell=, which often works for other formatters but is sometimes a
little flaky.  =Reformatter= is a better solution, as I can define modes for
different formatters here and then use =eval= in =.dir-locals.el= on a per-project
basis to enable the fitting mode there.

** Fourmolu

#+begin_src emacs-lisp
(reformatter-define +fourmolu-format
  :program "fourmolu"
  :args (list "--stdin-input-file" (or (buffer-file-name) input-file))
  :lighter " +fourmolu")

(local-leader
  :keymaps 'haskell-mode-map
  "f" #'+fourmolu-format-buffer)
#+end_src

** Cabal files

#+begin_src emacs-lisp
(reformatter-define +cabal-fmt-format
  :program "cabal-fmt"
  :args (list "-i" input-file)
  :stdin nil
  :stdout nil
  :lighter " +cabal-fmt")

(local-leader
  :keymaps 'haskell-cabal-mode-map
  "f" #'+cabal-fmt-format-buffer)
#+end_src

* Better (no) indentation for =o= and =O= vim motions

Indentation using the "open line" motions in =evil= behaves weirdly in that it
adds indentation where none should be. These functions mostly fix this; they're
snatched from the Doom Emacs Haskell module.

I'm not sure whether I really need the "above" one, but I'll try it out.

#+begin_src emacs-lisp
(defun +haskell-evil-open-above ()
  "Open a line above the current mode."
  (interactive)
  (evil-beginning-of-line)
  (haskell-indentation-newline-and-indent)
  (evil-previous-line)
  (haskell-indentation-indent-line)
  (evil-append-line nil))

(defun +haskell-evil-open-below ()
  "Open a line below the current mode."
  (interactive)
  (evil-append-line nil)
  (haskell-indentation-newline-and-indent))
#+end_src

* =Haskell-mode= configuration

Now load the actual =haskell-mode= package, and put some often-used functions as
well as some of the above utilities into a local keymap for easy access.

#+begin_src emacs-lisp
(use-package haskell-mode
  :defer
  :custom
  (haskell-process-type 'cabal-repl)
  (haskell-interactive-popup-errors nil)
  (haskell-process-args-cabal-repl '("--repl-options=-ferror-spans"))
  :hook
  (haskell-mode . interactive-haskell-mode)
  :config
  (use-package lsp-haskell)
  (general-define-key
   :keymaps 'haskell-mode-map
   :states 'normal
   "o" #'+haskell-evil-open-below
   "O" #'+haskell-evil-open-above)
  ;; Don't make certain commands repeatable with '.'
  (mapc #'evil-declare-ignore-repeat
        '(haskell-process-load-file
          haskell-process-reload
          haskell-goto-first-error
          haskell-goto-next-error
          haskell-goto-prev-error
          hydra-haskell-error-navigation/body
          +haskell-add-import
          +haskell-add-ghc-option
          +haskell-add-language-extension))
  :bind
  (:map haskell-mode-map
        ("C-c e" . hydra-haskell-error-navigation/body)
        ("C-c i" . +haskell-add-import)
        ("C-c p l" . +haskell-add-language-extension)
        ("C-c p o" . +haskell-add-ghc-option)
        ("C-c h k" . haskell-session-kill)
        ("C-c h r" . haskell-process-restart)
        ("C-c n" . +haskell-newtype-template)))

(provide '+haskell)
#+end_src
