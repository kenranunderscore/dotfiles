#+TITLE: Haskell configuration and utilities
#+AUTHOR: Johannes Maier
#+EMAIL: johannes.maier@mailbox.org
#+STARTUP: showall
#+OPTIONS: toc:nil

* Insert language extensions and GHC options

This package contains A couple of Emacs Lisp functions that help me to
make quick changes to Haskell files (adding pragmas, language
extensions, GHC options).

#+begin_src emacs-lisp
(defun my/make-pragma (pragma content)
  "Create a pragma line of type `pragma' containing `content'."
  (concat "{-# " pragma " " content " #-}\n"))

(defun my/haskell-add-language-extension (ext-name)
  "Add an extension from the list of available language extensions
to the top of the file."
  (interactive
   (list
    (completing-read
     "Extension: "
     haskell-ghc-supported-extensions)))
  (let ((pragma (my/make-pragma "LANGUAGE" ext-name)))
    (save-excursion
      (goto-char (point-min))
      (insert pragma))))

(defun my/haskell-add-ghc-option (opt-name)
  "Add a GHC option from the list of options to the top of the
file."
  (interactive
   (list
    (completing-read
     "GHC option: "
     haskell-ghc-supported-options)))
  (let ((pragma (my/make-pragma "OPTIONS_GHC" opt-name)))
    (save-excursion
      (goto-char (point-min))
      (insert pragma))))
#+end_src

* Insert imports

This function is the one is use by far the most It makes it somewhat
easy to add =import= statements to Haskell files.  It's surely not
perfect, but fits my preferences well; that is, I almost never use the
combinations that are harder to add with this template.  For instance,
adding a qualified import with import list, or an unqualified one with
an alias, would require "tricks".

#+begin_src emacs-lisp
(defun my/read-non-empty-string (prompt &optional initial-input)
  "Read a string from the minibuffer.  When the result is the empty
string, return nil instead."
  (let ((str (read-string prompt initial-input)))
    (unless (string-empty-p str)
      str)))

(defun my/haskell-add-import (arg module &optional qualified? alias)
  "Add an import to the import list.  When no prefix ARG is set, the
user will be prompted whether the import should be qualified, and
what the identifier should be in that case."
  (interactive
   (let* ((arg current-prefix-arg)
          (module (read-string "Module: "))
          (qualified?
           (unless (or arg (string-match-p "(" module))
             (y-or-n-p (concat "Import " module " qualified?"))))
          (default-alias
           (last (split-string module "[\.]" t)))
          (alias (when qualified?
                   (my/read-non-empty-string "Alias: " default-alias))))
     (list arg module qualified? alias)))
  (let ((import-line
         (concat "import "
                 (when qualified? "qualified ")
                 module
                 (when (and alias
                            (not (string= alias module)))
                   (concat " as " alias))
                 "\n")))
    (save-excursion
      (haskell-navigate-imports-go)
      (insert import-line))))
#+end_src

* Templates

While I'm using =TempEL= for templates in Emacs, some things are just a
tad bit too complex to handle in a template language, and much easier
to do in ELisp.  These go here.

** Newtypes

In Haskell, =newtype= is a mechanism I use all the time.  These are
different (but not all) scenarios that need to be possible to output
with a utility command:

#+begin_src haskell :tangle no
newtype Foo = Foo Int
newtype Foo a = Foo (IO a)
newtype Foo = Foo { unFoo :: Int } -- the default
newtype Foo = SomeCtor { unFoo :: Int }
newtype Foo = SomeCtor { custom :: Int }
newtype Foo a = SomeCtor { unFoo :: ReaderT Config IO a }
-- etc.
#+end_src

The following rather complicated command /should/ handle all the cases
above.

#+begin_src emacs-lisp
(defun my/haskell-newtype-template (arg name ctor accessor type)
  "Create a Haskell newtype declaration.  This will ask you for the
type NAME, the inner TYPE, and optionally for constructor and
accessor name.  If called with a non-nil prefix ARG then it won't
create and accessor and omit the curly braces."
  (interactive
   (let* ((arg current-prefix-arg)
          (name (my/read-non-empty-string "Name: "))
          (ctor (or (my/read-non-empty-string
                     (concat "Constructor [default " name "]: "))
                    name))
          (accessor-def (concat "un" name))
          (accessor (unless arg
                      (or (my/read-non-empty-string
                           (concat "Accessor [default " accessor-def "]: "))
                          accessor-def)))
          (type (my/read-non-empty-string "Inner type: ")))
     (list arg name ctor accessor type)))
  (let* ((type-parts
          (mapcar (lambda (s)
                    (replace-regexp-in-string "[\\(\\)]" "" s))
                  (split-string type split-string-default-separators t)))
         (type-param (seq-find (lambda (s)
                                 (let ((c (string-to-char s)))
                                   (equal c (downcase c))))
                               type-parts))
         (lhs (if type-param
                  (concat name " " type-param)
                name))
         (final-type (if (and arg
                              type-param
                              (> (seq-length type-parts) 1)) ; need parens around type
                         (concat "(" type ")")
                       type))
         (content (if accessor
                      (concat "{ " accessor " :: " final-type " }")
                    final-type)))
    (insert
     (concat "newtype " lhs " = " ctor " " content "\n"))))
#+end_src

** =Abbrev= table

I use explicit TempEL expansion in some places.  But for my custom
commands I want to try out using =abbrev= with some short identifiers.

#+begin_src emacs-lisp
(define-abbrev-table 'haskell-mode-abbrev-table
  '(("nt" "" (lambda ()
               (call-interactively #'my/haskell-newtype-template)))
    ("dsg" "deriving stock (Eq, Show, Generic)")
    ("ds" "deriving stock (Eq, Show)")
    ("ud" "undefined")))
#+end_src

* Navigating errors

As always, =hydra= is highly capable of simplifying all sorts of
navigational sets of commands.

#+begin_src emacs-lisp
(defhydra hydra-haskell-error-navigation (:hint nil)
  "\n
  Navigate Haskell compilation errors\n
  [_f_]: first   [_n_]: next   [_p_]: previous"
  ("f" haskell-goto-first-error)
  ("n" haskell-goto-next-error)
  ("p" haskell-goto-prev-error))
#+end_src

* =Haskell-mode= configuration

Now load the actual =haskell-mode= package, and put some often-used
functions as well as some of the above utilities into a local keymap
for easy access.

#+begin_src emacs-lisp
(require 'use-package)
(use-package haskell-mode
  :defer
  :custom
  (haskell-process-type 'cabal-repl)
  (haskell-interactive-popup-errors nil)
  (haskell-process-args-cabal-repl '("--repl-options=-ferror-spans"))
  :hook
  (haskell-mode . interactive-haskell-mode)
  :bind
  (:map haskell-mode-map
        ("C-c e" . hydra-haskell-error-navigation/body)
        ("C-c i" . my/haskell-add-import)
        ("C-c p l" . my/haskell-add-language-extension)
        ("C-c p o" . my/haskell-add-ghc-option)
        ("C-c h k" . haskell-session-kill)
        ("C-c h r" . haskell-process-restart)
        ("C-c n" . my/haskell-newtype-template)))

(provide 'my-haskell)
#+end_src
