#+TITLE: My StumpWM configuration
#+AUTHOR: Johannes Maier
#+EMAIL: johannes.maier@mailbox.org
#+STARTUP: showall

* Initialization

Before being able to do anything else, we enter the =stumpwm= package.

#+begin_src common-lisp
(in-package :stumpwm)
#+end_src

* Theme and other visuals
** Using TrueType fonts / =xft=

Sadly, StumpWM relies on server-side fonts under X; but my fonts are
installed via [[https://github.com/nix-community/home-manager][home-manager]], and cannot be seen by the X server.  In
order to use =xft=, we have to rely on the =clx-truetype= package, which
is deprecated but being kept alive on GitHub.  It needs to be
installed on the system, which I did by cloning it into my
=$HOME/.quicklisp/local-packages/= directory; =(ql:quickload
:clx-truetype)= then succeeds when being called by the =load-module=
function below.

#+begin_src common-lisp
(load-module "ttf-fonts")
#+end_src

Now add the Nix-installed fonts to the search path of =clx-truetype=.

#+begin_src common-lisp
(setq clx-truetype::*font-dirs*
      (append (list (namestring "~/.nix-profile/share/fonts"))
              clx-truetype::*font-dirs*))
#+end_src

If a font that should be installed cannot be found by =xft=, we renew
the cache (or at least that's my understanding of what happens here --
I've taken this from somewhere I don't remember).

#+begin_src common-lisp
(when (not (find "Unifont Regular" (xft:get-font-families)
                 :test #'equal))
  (xft:cache-fonts))
#+end_src

After all this trouble is done, we can finally set the actual font.  I
can see myself adding a command to switch fonts or themes later on,
like I did in Emacs.

#+begin_src common-lisp
(set-font (make-instance 'xft:font
                         :family "Unifont"
                         :subfamily "Regular"
                         :size 20
                         :antialias t))
#+end_src

** Message and input windows

#+begin_src common-lisp
(setf *message-window-gravity* :center
      ,*message-window-padding* 25
      ,*message-window-y-padding* 10)
(setf *input-window-gravity* :center)
#+end_src

** Borders

I like thin, barely visible borders around my windows, mainly just to
see where the current focus is.  The color should be a bit more flashy
as well, but that should come as soon as I think about theming.

#+begin_src common-lisp
(setf *window-border-style* :thin)
(setf *normal-border-width* 1)
(setf *maxsize-border-width* 1)
(setf *transient-border-width* 1)
#+end_src

* Interactive development with Emacs and SLY

Load and start a slynk server in a background thread.  At a later
date, this should be made into a command in order to only start it
whenever I want to connect to StumpWM via SLY REPL.

#+begin_src common-lisp
(ql:quickload :slynk)

(defcommand my/start-slynk-server (port)
    ((:number "Enter the port [default = 4444]: "))
  (let ((actual-port (or port 4444)))
    (sb-thread:make-thread
     (lambda ()
       (slynk:create-server
        :port actual-port
        :dont-close t))
     :name "slynk-auto")
    (message "Slynk server running on port ~a" actual-port)))
#+end_src

After executing the command =my/start-slynk-server= and entering a port
number, from within Emacs I can =sly-connect=.  Inside the resulting
SLY REPL I have to do =(in-package :stumpwm)= and can then interactively
develop this configuration.

* Startup commands, scripts, programs, etc.

The default repeat rate of keys is way too low for my taste, so I
usually increase it.  In StumpWM, those things are just executed in a
shell:

#+begin_src common-lisp
(run-shell-command "xset r rate 200 55")
#+end_src

;; Local Variables:
;; eval: (add-hook 'after-save-hook
;;                 (lambda () 
;;                   (org-babel-tangle nil "init.lisp"))
;;                 nil t)
;; End:
